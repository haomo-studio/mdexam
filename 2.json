{
    "questions": [
        {
            "type": "multiple-choice",
            "question": "下列哪一种叙述是正确的（ ）",
            "tags": [],
            "options": [
                "A. abstract修饰符可修饰字段、方法和类",
                "B. 抽象方法的body部分必须用一对大括号{ }包住",
                "C. 声明抽象方法，大括号可有可无",
                "D. 声明抽象方法不可写出大括号"
            ],
            "answer": [
                "D. 声明抽象方法不可写出大括号"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "以下哪些继承自 Collection 接口（）",
            "tags": [],
            "options": [
                "A. List",
                "B. Set",
                "C. Map",
                "D. Array"
            ],
            "answer": [
                "A. List",
                "B. Set"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "ArrayLists和LinkedList的区别，下述说法正确的有？",
            "tags": [],
            "options": [
                "A. ArrayList是实现了基于动态数组的数据结构，LinkedList基于链表的数据结构。",
                "B. 对于随机访问get和set，ArrayList觉得优于LinkedList，因为LinkedList要移动指针。",
                "C. 对于新增和删除操作add和remove，LinkedList比较占优势，因为ArrayList要移动数据。",
                "D. ArrayList的空间浪费主要体现在在list列表的结尾预留一定的容量空间，而LinkedList的空间花费则体现在它的每一个元素都需要消耗相当的空间。"
            ],
            "answer": [
                "A. ArrayList是实现了基于动态数组的数据结构，LinkedList基于链表的数据结构。",
                "B. 对于随机访问get和set，ArrayList觉得优于LinkedList，因为LinkedList要移动指针。",
                "C. 对于新增和删除操作add和remove，LinkedList比较占优势，因为ArrayList要移动数据。",
                "D. ArrayList的空间浪费主要体现在在list列表的结尾预留一定的容量空间，而LinkedList的空间花费则体现在它的每一个元素都需要消耗相当的空间。"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "JAVA反射机制主要提供了以下哪些功能？",
            "tags": [],
            "options": [
                "A. 在运行时判断一个对象所属的类",
                "B. 在运行时构造一个类的对象",
                "C. 在运行时判断一个类所具有的成员变量和方法",
                "D. 在运行时调用一个对象的方法"
            ],
            "answer": [
                "A. 在运行时判断一个对象所属的类",
                "B. 在运行时构造一个类的对象",
                "C. 在运行时判断一个类所具有的成员变量和方法",
                "D. 在运行时调用一个对象的方法"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "ServletConfig接口默认是哪里实现的？",
            "tags": [],
            "options": [
                "A. Servlet",
                "B. GenericServlet",
                "C. HttpServlet",
                "D. 用户自定义servlet"
            ],
            "answer": [
                "B. GenericServlet"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "下面有关java内存模型的描述，说法错误的是？",
            "tags": [],
            "options": [
                "A. JMM通过控制主内存与每个线程的本地内存之间的交互，来为java程序员提供内存可见性保证",
                "B. “synchronized” — 保证在块开始时都同步主内存的值到工作内存，而块结束时将变量同步回主内存",
                "C. “volatile” — 保证修饰后在对变量读写前都会与主内存更新。",
                "D. 如果在一个线程构造了一个不可变对象之后（对象仅包含final字段），就可以保证了这个对象被其他线程正确的查看"
            ],
            "answer": [
                "D. 如果在一个线程构造了一个不可变对象之后（对象仅包含final字段），就可以保证了这个对象被其他线程正确的查看"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "下面有关JSP内置对象的描述，说法错误的是？",
            "tags": [],
            "options": [
                "A. session对象：session对象指的是客户端与服务器的一次会话，从客户连到服务器的一个WebApplication开始，直到客户端与服务器断开连接为止",
                "B. request对象：客户端的请求信息被封装在request对象中，通过它才能了解到客户的需求，然后做出响应",
                "C. application对象：application对象实现了用户间数据的共享，可存放全局变量，可以有多个",
                "D. response对象：response对象包含了响应客户请求的有关信息"
            ],
            "answer": [
                "C. application对象：application对象实现了用户间数据的共享，可存放全局变量，可以有多个"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "下列不属于Java语言性特点的是",
            "tags": [],
            "options": [
                "A. Java致力于检查程序在编译和运行时的错误",
                "B. Java能运行虚拟机实现跨平台",
                "C. Java自己操纵内存减少了内存出错的可能性",
                "D. Java还实现了真数组，避免了覆盖数据类型的可能"
            ],
            "answer": [
                "D. Java还实现了真数组，避免了覆盖数据类型的可能"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "在异常处理中，如释放资源，关闭数据库、关闭文件应由（ ）语句来完成。",
            "tags": [],
            "options": [
                "A. try子句",
                "B. catch子句",
                "C. finally子句",
                "D. throw子句"
            ],
            "answer": [
                "C. finally子句"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "关于 Java 线程，下面说法错误的是（）。",
            "tags": [],
            "options": [
                "A. 创建线程的方法有两种：实现Runnable接口和继承Thread类",
                "B. java利用线程使整个系统成为异步",
                "C. 新线程一旦被创建，它将自动开始运行"
            ],
            "answer": [
                "C. 新线程一旦被创建，它将自动开始运行"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "下面哪个不属于HttpServletResponse接口完成的功能？",
            "tags": [],
            "options": [
                "A.设置HTTP头标",
                "B.设置cookie",
                "C.读取路径信息",
                "D.输出返回数据"
            ],
            "answer": [
                "C.读取路径信息"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "在运行时，由java解释器自动引入，而不用import语句引入的包是()。",
            "tags": [],
            "options": [
                "A.java.lang",
                "B.java.system",
                "C.java.io",
                "D.java.util"
            ],
            "answer": [
                "A.java.lang"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "下面哪一项不是加载驱动程序的方法？",
            "tags": [],
            "options": [
                "A.通过DriverManager.getConnection方法加载",
                "B.调用方法 Class.forName",
                "C.通过添加系统的jdbc.drivers属性",
                "D.通过registerDriver方法注册"
            ],
            "answer": [
                "A.通过DriverManager.getConnection方法加载"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "Java中的集合类包括ArrayList、LinkedList、HashMap等，下列关于集合类描述错误的是？",
            "tags": [],
            "options": [
                "A.ArrayList和LinkedList均实现了List接口",
                "B.ArrayList的访问速度比LinkedList快",
                "C.随机添加和删除元素时，ArrayList的表现更佳",
                "D.HashMap实现Map接口，它允许任何类型的键和值对象"
            ],
            "answer": [
                "C.随机添加和删除元素时，ArrayList的表现更佳"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "下列选项中属于面向对象设计方法主要特征的是（ ）。",
            "tags": [],
            "options": [
                "A.继承",
                "B.自顶向下",
                "C.模块化",
                "D.逐步求精"
            ],
            "answer": [
                "A.继承"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "以下描述不正确的有",
            "tags": [],
            "options": [
                "A.try块不可以省略",
                "B.可以使用多重catch块",
                "C.finally块可以省略",
                "D.catch块和finally块可以同时省略"
            ],
            "answer": [
                "D.catch块和finally块可以同时省略"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "要在session对象中保存属性，可以使用以下哪个语句(      )",
            "tags": [],
            "options": [
                "A.session.getAttribute(“key”，”value”)",
                "B.session.setAttribute(“key”，”value”)",
                "C.session.setAttribute(“key”)",
                "D.session.getAttribute(“key”)"
            ],
            "answer": [
                "B.session.setAttribute(“key”，”value”)"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "String str1 = “abc”，“abc”分配在内存哪个区域？",
            "tags": [],
            "options": [
                "A.堆",
                "B.栈",
                "C.字符串常量区",
                "D.寄存器"
            ],
            "answer": [
                "C.字符串常量区"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "在JAVA中，下面关于String类和StringBuffer类的描述正确的是那一个？",
            "tags": [],
            "options": [
                "A.StringBuffer类的对象调用toString（）方法将转换为String类型",
                "B.两个类都有append（）方法",
                "C.可以直接将字符串“test”赋值给声明的String类和StringBuffer类的变量",
                "D.两个类的实例的值都能够被改变"
            ],
            "answer": [
                "A.StringBuffer类的对象调用toString（）方法将转换为String类型"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "public interface IService {String NAME=\"default\";}默认类型等价表示是哪一项:",
            "tags": [],
            "options": [
                "A.public String NAME=\"default\";",
                "B.public static String NAME=\"default\";",
                "C.public static final String NAME=\"default\";",
                "D.private String NAME=\"default\";"
            ],
            "answer": [
                "C.public static final String NAME=\"default\";"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "下列选项中是正确的方法声明的是？（）",
            "tags": [],
            "options": [
                "A.protected abstract void f1();",
                "B.public final void f1() {}",
                "C.static final void fq(){}",
                "D.private void f1() {}"
            ],
            "answer": [
                "A.protected abstract void f1();",
                "B.public final void f1() {}",
                "C.static final void fq(){}",
                "D.private void f1() {}"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "java中用()字指明继承关系.用()关键字指明对接口的实现。",
            "tags": [],
            "options": [
                "A.implements extends",
                "B.extends implements",
                "C.extend implement",
                "D.implement extend"
            ],
            "answer": [
                "B.extends implements"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "HashMap和HashTable的描述，错误的是？",
            "tags": [],
            "options": [
                "A.他们都实现了Map接口。",
                "B.HashMap非线程安全，在多个线程访问Hashtable时，不需要自己为它的方法实现同步，而HashMap就必须为之提供额外同步。",
                "C.HashMap允许将null作为一个entry的key或者value，而Hashtable不允许。",
                "D.通过contains方法可以判断一个对象是否存在于HashMap或者Hashtable中。"
            ],
            "answer": [
                "D.通过contains方法可以判断一个对象是否存在于HashMap或者Hashtable中。"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "下面关于Spring的说法中错误的是（）",
            "tags": [],
            "options": [
                "A.Spring是一系列轻量级Java EE框架的集合",
                "B.Spring中包含一个“依赖注入”模式的实现",
                "C.使用Spring可以实现声明式事务",
                "D.Spring提供了AOP方式的日志系统"
            ],
            "answer": [
                "D.Spring提供了AOP方式的日志系统"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "J2EE中，当把来自客户机的HTTP请求委托给servlet时，会调用HttpServlet的（    ）方法",
            "tags": [],
            "options": [
                "A.service",
                "B.doget",
                "C.dopost",
                "D.init"
            ],
            "answer": [
                "A.service"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "下面有关servlet中init,service,destroy方法描述错误的是？",
            "tags": [],
            "options": [
                "A.init()方法是servlet生命的起点。一旦加载了某个servlet，服务器将立即调用它的init()方法",
                "B.service()方法处理客户机发出的所有请求",
                "C.destroy()方法标志servlet生命周期的结束",
                "D.servlet在多线程下使用了同步机制，因此，在并发编程下servlet是线程安全的"
            ],
            "answer": [
                "D.servlet在多线程下使用了同步机制，因此，在并发编程下servlet是线程安全的"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "下面有关java和c++的描述，错误的是？",
            "tags": [],
            "options": [
                "A.java是一次编写多处运行，c++是一次编写多处编译",
                "B.c++和java支持多继承",
                "C.Java不支持操作符重载，操作符重载被认为是c++的突出特征",
                "D.java没有函数指针机制，c++支持函数指针"
            ],
            "answer": [
                "B.c++和java支持多继承"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "常用的servlet包的名称是？",
            "tags": [],
            "options": [
                "A.java.servlet",
                "B.javax.servlet",
                "C.servlet.http",
                "D.javax.servlet.http"
            ],
            "answer": [
                "B.javax.servlet",
                "D.javax.servlet.http"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "哪个是不正确的字符常量？",
            "tags": [],
            "options": [
                "A.”\\n”",
                "B.”1”",
                "C.”a”",
                "D.”\\101”"
            ],
            "answer": [
                "A.”\\n”",
                "B.”1”",
                "C.”a”",
                "D.”\\101”"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "Java是从（）语言改进重新设计",
            "tags": [],
            "options": [
                "A.Ada",
                "B.C++",
                "C.Pascal",
                "D.BASIC"
            ],
            "answer": [
                "B.C++"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "在 java 中 , 一个类（）",
            "tags": [],
            "options": [
                "A.可以继承多个类",
                "B.可以实现多个接口",
                "C.在一个程序中只能有一个子类",
                "D.只能实现一个接口"
            ],
            "answer": [
                "B.可以实现多个接口"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "关于依赖注入，下列选项中说法错误的是（）",
            "tags": [],
            "options": [
                "A.依赖注入能够独立开发各组件，然后根据组件间关系进行组装",
                "B.依赖注入使组件之间相互依赖，相互制约",
                "C.依赖注入提供使用接口编程",
                "D.依赖注入指对象在使用时动态注入"
            ],
            "answer": [
                "B.依赖注入使组件之间相互依赖，相互制约"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "下面有关java hashmap的说法错误的是？",
            "tags": [],
            "options": [
                "A.HashMap 的实例有两个参数影响其性能：“初始容量” 和 “加载因子”。",
                "B.HashMap 的实现不是同步的，意味着它不是线程安全的",
                "C.HashMap通过开放地址法解决哈希冲突",
                "D.HashMap中的key-value都是存储在Entry数组中的"
            ],
            "answer": [
                "C.HashMap通过开放地址法解决哈希冲突"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "通过JDBC访问数据库包含下面哪几步？",
            "tags": [],
            "options": [
                "A.载入JDBC驱动程序",
                "B.建立连接",
                "C.执行查询或更新",
                "D.关闭连接"
            ],
            "answer": [
                "A.载入JDBC驱动程序",
                "B.建立连接",
                "C.执行查询或更新",
                "D.关闭连接"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "下列选项中是正确的方法声明的是？（）",
            "tags": [],
            "options": [
                "A.protected abstract void f1();",
                "B.public final void f1() {}",
                "C.static final void fq(){}",
                "D.private void f1() {}"
            ],
            "answer": [
                "A.protected abstract void f1();",
                "B.public final void f1() {}",
                "C.static final void fq(){}",
                "D.private void f1() {}"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "判断对错。List，Set，Map都继承自继承Collection接口。",
            "tags": [],
            "options": [
                "A.对",
                "B.错"
            ],
            "answer": []
        },
        {
            "type": "multiple-choice",
            "question": "下面关于构造方法的说法不正确的是 ()",
            "tags": [],
            "options": [
                "A.构造方法也属于类的方法，用于创建对象的时候给成员变量赋值",
                "B.构造方法不可以重载",
                "C.构造方法没有返回值",
                "D.构造方法一定要和类名相同"
            ],
            "answer": [
                "B.构造方法不可以重载"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "下列关于java 中的 wait()方法和 sleep()方法的区别描述错误的是？",
            "tags": [],
            "options": [
                "A.wait()方法属于Object类，sleep()属于Thread类",
                "B.调用wait()方法的时候，线程会放弃对象锁",
                "C.调用sleep()方法的过程中，线程不会释放对象锁",
                "D.sleep()方法导致了程序暂停执行指定的时间，让出cpu给其他线程"
            ],
            "answer": [
                "D.sleep()方法导致了程序暂停执行指定的时间，让出cpu给其他线程"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "ArrayList和LinkList的描述，下面说法错误的是？",
            "tags": [],
            "options": [
                "A.LinkedeList和ArrayList都实现了List接口",
                "B.ArrayList是可改变大小的数组，而LinkedList是双向链接串列",
                "C.LinkedList不支持高效的随机元素访问",
                "D.在LinkedList的中间插入或删除一个元素意味着这个列表中剩余的元素都会被移动；而在ArrayList的中间插入或删除一个元素的开销是固定的"
            ],
            "answer": [
                "D.在LinkedList的中间插入或删除一个元素意味着这个列表中剩余的元素都会被移动；而在ArrayList的中间插入或删除一个元素的开销是固定的"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "以下描述正确的是",
            "tags": [],
            "options": [
                "A.CallableStatement是PreparedStatement的父接口",
                "B.PreparedStatement是CallableStatement的父接口",
                "C.CallableStatement是Statement的子接口",
                "D.PreparedStatement是Statement的父接口"
            ],
            "answer": [
                "B.PreparedStatement是CallableStatement的父接口"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "只有实现了()接口的类，其对象才能序列化。",
            "tags": [],
            "options": [
                "A.Serializable",
                "B.Cloneable",
                "C.Comparable",
                "D.Writeable"
            ],
            "answer": [
                "A.Serializable"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "java 中哪个关键字可以对对象加互斥锁？",
            "tags": [],
            "options": [
                "A.transient",
                "B.synchronized",
                "C.serialize",
                "D.static"
            ],
            "answer": [
                "B.synchronized"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "关于JAVA的垃圾回收机制，下面哪些结论是正确？",
            "tags": [],
            "options": [
                "A.程序可以任意指定释放内存的时间",
                "B.JAVA程序不能依赖于垃圾回收的时间或者顺序",
                "C.程序可明确地标识某个局部变量的引用不再被使用",
                "D.程序可以显式地立即释放对象占有的内存"
            ],
            "answer": [
                "B.JAVA程序不能依赖于垃圾回收的时间或者顺序"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "Java中的集合类包括ArrayList、LinkedList、HashMap等，下列关于集合类描述错误的是？",
            "tags": [],
            "options": [
                "A.ArrayList和LinkedList均实现了List接口",
                "B.ArrayList的访问速度比LinkedList快",
                "C.随机添加和删除元素时，ArrayList的表现更佳",
                "D.HashMap实现Map接口，它允许任何类型的键和值对象"
            ],
            "answer": [
                "C.随机添加和删除元素时，ArrayList的表现更佳"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "下面哪些属于JSP内置对象及方法？",
            "tags": [],
            "options": [
                "A.request",
                "B.out",
                "C.application",
                "D.config"
            ],
            "answer": [
                "A.request",
                "B.out",
                "C.application",
                "D.config"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "下面哪些类实现或集成了Collection接口？",
            "tags": [],
            "options": [
                "A.HashMap",
                "B.ArrayList",
                "C.Vector",
                "D.Iterator"
            ],
            "answer": [
                "B.ArrayList",
                "C.Vector"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "java中 String str = \"hello world\"下列语句错误的是？",
            "tags": [],
            "options": [
                "A.str+=' a'",
                "B.int strlen = str.length",
                "C.str=100",
                "D.str=str+100"
            ],
            "answer": [
                "A.str+=' a'",
                "B.int strlen = str.length",
                "C.str=100"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "下面有关java classloader说法错误的是?",
            "tags": [],
            "options": [
                "A.Java默认提供的三个ClassLoader是BootStrap ClassLoader，Extension ClassLoader，App ClassLoader",
                "B.ClassLoader使用的是双亲委托模型来搜索类的",
                "C.JVM在判定两个class是否相同时，只用判断类名相同即可，和类加载器无关",
                "D.ClassLoader就是用来动态加载class文件到内存当中用的"
            ],
            "answer": [
                "C.JVM在判定两个class是否相同时，只用判断类名相同即可，和类加载器无关"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "下面有关SPRING的事务传播特性，说法错误的是？",
            "tags": [],
            "options": [
                "A.PROPAGATION_SUPPORTS：支持当前事务，如果当前没有事务，就以非事务方式执行",
                "B.PROPAGATION_REQUIRED：支持当前事务，如果当前没有事务，就抛出异常",
                "C.PROPAGATION_REQUIRES_NEW：新建事务，如果当前存在事务，把当前事务挂起",
                "D.PROPAGATION_NESTED：支持当前事务，新增Savepoint点，与当前事务同步提交或回滚"
            ],
            "answer": [
                "B.PROPAGATION_REQUIRED：支持当前事务，如果当前没有事务，就抛出异常"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "关于sleep()和wait()，以下描述错误的一项是（ ）",
            "tags": [],
            "options": [
                "A.sleep是线程类（Thread）的方法，wait是Object类的方法；",
                "B.sleep不释放对象锁，wait放弃对象锁",
                "C.sleep暂停线程、但监控状态仍然保持，结束后会自动恢复",
                "D.wait后进入等待锁定池，只有针对此对象发出notify方法后获得对象锁进入运行状态"
            ],
            "answer": [
                "D.wait后进入等待锁定池，只有针对此对象发出notify方法后获得对象锁进入运行状态"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "下面有关java类加载器，说法正确的是？",
            "tags": [],
            "options": [
                "A.引导类加载器（bootstrap class loader）：它用来加载 Java 的核心库，是用原生代码来实现的",
                "B.系统类加载器（system class loader）：它根据 Java 应用的类路径（CLASSPATH）来加载 Java 类",
                "C.扩展类加载器（extensions class loader）：它用来加载 Java 的扩展库。",
                "D.tomcat为每个App创建一个Loader，里面保存着此WebApp的ClassLoader。需要加载WebApp下的类时，就取出ClassLoader来使用"
            ],
            "answer": [
                "A.引导类加载器（bootstrap class loader）：它用来加载 Java 的核心库，是用原生代码来实现的",
                "B.系统类加载器（system class loader）：它根据 Java 应用的类路径（CLASSPATH）来加载 Java 类",
                "C.扩展类加载器（extensions class loader）：它用来加载 Java 的扩展库。",
                "D.tomcat为每个App创建一个Loader，里面保存着此WebApp的ClassLoader。需要加载WebApp下的类时，就取出ClassLoader来使用"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "关于volatile关键字，下列描述不正确的是？",
            "tags": [],
            "options": [
                "A.用volatile修饰的变量，每次更新对其他线程都是立即可见的。",
                "B.对volatile变量的操作是原子性的。",
                "C.对volatile变量的操作不会造成阻塞。",
                "D.不依赖其他锁机制，多线程环境下的计数器可用volatile实现。"
            ],
            "answer": [
                "B.对volatile变量的操作是原子性的。",
                "D.不依赖其他锁机制，多线程环境下的计数器可用volatile实现。"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "下列关于java 中的 wait()方法和 sleep()方法的区别描述错误的是？",
            "tags": [],
            "options": [
                "A.wait()方法属于Object类，sleep()属于Thread类",
                "B.调用wait()方法的时候，线程会放弃对象锁",
                "C.调用sleep()方法的过程中，线程不会释放对象锁",
                "D.sleep()方法导致了程序暂停执行指定的时间，让出cpu给其他线程"
            ],
            "answer": [
                "D.sleep()方法导致了程序暂停执行指定的时间，让出cpu给其他线程"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "以下声明合法的是",
            "tags": [],
            "options": [
                "A.default String s",
                "B.public final static native int w( )",
                "C.abstract double d",
                "D.abstract final double hyperbolicCosine( )"
            ],
            "answer": [
                "B.public final static native int w( )"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "java中，StringBuilder和StringBuffer的区别，下面说法错误的是？",
            "tags": [],
            "options": [
                "A.StringBuffer是线程安全的",
                "B.StringBuilder是非线程安全的",
                "C.StringBuffer对 String 类型进行改变的时候其实都等同于生成了一个新的 String 对象，然后将指针指向新的 String 对象。",
                "D.效率比较String<StringBuffer<StringBuilder，但是在 String S1 = “This is only a” + “ simple” + “ test”时，String效率最高。"
            ],
            "answer": [
                "C.StringBuffer对 String 类型进行改变的时候其实都等同于生成了一个新的 String 对象，然后将指针指向新的 String 对象。"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "下面不属于HttpServletRequest接口完成功能的是？",
            "tags": [],
            "options": [
                "A.读取cookie",
                "B.读取HTTP头",
                "C.设定响应的content类型",
                "D.读取路径信息"
            ],
            "answer": [
                "C.设定响应的content类型"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "下列选项中关于Java中super关键字的说法正确的是（）",
            "tags": [],
            "options": [
                "A.super关键字是在子类对象内部指代其父类对象的引用",
                "B.super关键字不仅可以指代子类的直接父类，还可以指代父类的父类",
                "C.子类通过super关键字只能调用父类的方法，而不能调用父类的属性",
                "D.子类通过super关键字只能调用父类的属性，而不能调用父类的方法"
            ],
            "answer": [
                "A.super关键字是在子类对象内部指代其父类对象的引用"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "关于PreparedStatement与Statement描述错误的是（）",
            "tags": [],
            "options": [
                "A.一般而言，PreparedStatement比Statement执行效率更高",
                "B.PreparedStatement会预编译SQL语句",
                "C.Statement每次都会解析/编译SQL，确立并优化数据获取路径",
                "D.Statement执行扫描的结果集比PreparedStatement大"
            ],
            "answer": [
                "D.Statement执行扫描的结果集比PreparedStatement大"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "以下集合对象中哪几个是线程安全的（）",
            "tags": [],
            "options": [
                "A.LinkedList",
                "B.ArrayList",
                "C.Vector",
                "D.Hashtable"
            ],
            "answer": [
                "C.Vector",
                "D.Hashtable"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "可将语句块或方法设为同步使用的语句是（）",
            "tags": [],
            "options": [
                "A.synchronized",
                "B.static",
                "C.abstract",
                "D.final"
            ],
            "answer": [
                "A.synchronized"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "下面有关webservice的描述，错误的是？",
            "tags": [],
            "options": [
                "A.Webservice是跨平台，跨语言的远程调用技术",
                "B.Webservice采用了soap协议（简单对象协议）进行通信",
                "C.Webservice通信机制实质就是json数据交换",
                "D.WSDL是用于描述 Web Services 以及如何对它们进行访问"
            ],
            "answer": [
                "C.Webservice通信机制实质就是json数据交换"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "ArrayList list = new ArrayList(20);中的list扩充几次",
            "tags": [],
            "options": [
                "A.0",
                "B.1",
                "C.2",
                "D.3"
            ],
            "answer": [
                "A.0"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "在Java中，以下关于方法重载和方法重写描述正确的是？",
            "tags": [],
            "options": [
                "A.方法重载和方法的重写实现的功能相同",
                "B.方法重载出现在父子关系中，方法重写是在同一类中",
                "C.方法重载的返回值类型必须一致，参数项必须不同",
                "D.方法重写的返回值类型必须相同或相容。（或是其子类）"
            ],
            "answer": [
                "D.方法重写的返回值类型必须相同或相容。（或是其子类）"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "下面有关JAVA swing的描述，说法错误的是？",
            "tags": [],
            "options": [
                "A.Swing是一个基于Java的跨平台MVC框架。使用单线程模式。",
                "B.Swing 是为了解决 AWT 存在的问题而新开发的包，它以 AWT 为基础的",
                "C.Swing优化了AWT，运行速度比AWT快",
                "D.Swing是一个基于组件的框架，所有的组件都是从javax.swing.JComponent类继承来的"
            ],
            "answer": [
                "C.Swing优化了AWT，运行速度比AWT快"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "一个以”.java”为后缀的源文件",
            "tags": [],
            "options": [
                "A.只能包含一个类，类名必须与文件名相同",
                "B.只能包含与文件名相同的类以及其中的内部类",
                "C.只能有一个与文件名相同的类，可以包含其他类",
                "D.可以包含任意类"
            ],
            "answer": [
                "C.只能有一个与文件名相同的类，可以包含其他类"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "以下对继承的描述错误的是（）",
            "tags": [],
            "options": [
                "A.Java中的继承允许一个子类继承多个父类",
                "B.父类更具有通用性，子类更具体",
                "C.Java中的继承存在着传递性",
                "D.当实例化子类时会递归调用父类中的构造方法"
            ],
            "answer": [
                "A.Java中的继承允许一个子类继承多个父类"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "使用mvc模式设计的web应用程序具有以下优点,除了？",
            "tags": [],
            "options": [
                "A.可维护行强",
                "B.可扩展性强",
                "C.代码重复少",
                "D.大大减少代码量"
            ],
            "answer": [
                "D.大大减少代码量"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "关于JSP生命周期的叙述，下列哪些为真?",
            "tags": [],
            "options": [
                "A.JSP会先解释成Servlet源文件，然后编译成Servlet类文件",
                "B.每当用户端运行JSP时，jsp init()方法都会运行一次",
                "C.每当用户端运行JSP时，jsp service()方法都会运行一次",
                "D.每当用户端运行JSP时，jsp destroy()方法都会运行一次"
            ],
            "answer": [
                "A.JSP会先解释成Servlet源文件，然后编译成Servlet类文件",
                "C.每当用户端运行JSP时，jsp service()方法都会运行一次"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "以下哪些jvm的垃圾回收方式采用的是复制算法回收",
            "tags": [],
            "options": [
                "A.新生代串行收集器",
                "B.老年代串行收集器",
                "C.并行收集器",
                "D.新生代并行回收收集器",
                "E.老年代并行回收收集器",
                "F.cms收集器"
            ],
            "answer": [
                "A.新生代串行收集器",
                "B.老年代串行收集器"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "使用mvc模式设计的web应用程序具有以下优点,除了？",
            "tags": [],
            "options": [
                "A.可维护行强",
                "B.可扩展性强",
                "C.代码重复少",
                "D.大大减少代码量"
            ],
            "answer": [
                "D.大大减少代码量"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "对于java类型变量char c,short s,float f,double d,表达式c*s+f+d的结果类型为（）",
            "tags": [],
            "options": [
                "A.float",
                "B.char",
                "C.short",
                "D.double"
            ],
            "answer": [
                "D.double"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "下列有关java构造函数叙述正确的是（）",
            "tags": [],
            "options": [
                "A.构造器的返回值为void类型",
                "B.如果一个源文件中有多个类，那么构造器必须与公共类同名",
                "C.构造器可以有0个，1个或一个以上的参数",
                "D.每个类可以有一个以上的构造器"
            ],
            "answer": [
                "C.构造器可以有0个，1个或一个以上的参数",
                "D.每个类可以有一个以上的构造器"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "下面有关java hashmap的说法错误的是？",
            "tags": [],
            "options": [
                "A.HashMap 的实例有两个参数影响其性能：“初始容量” 和 “加载因子”。",
                "B.HashMap 的实现不是同步的，意味着它不是线程安全的",
                "C.HashMap通过开放地址法解决哈希冲突",
                "D.HashMap中的key-value都是存储在Entry数组中的"
            ],
            "answer": [
                "C.HashMap通过开放地址法解决哈希冲突"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "Java 提供的事件处理模型是一种人机交互模型。它有三个基本要素",
            "tags": [],
            "options": [
                "A.事件源",
                "B.事件对象",
                "C.事件过程",
                "D.事件监听器"
            ],
            "answer": [
                "A.事件源",
                "B.事件对象",
                "D.事件监听器"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "Java多线程有几种实现方法？",
            "tags": [],
            "options": [
                "A.继承Thread类",
                "B.实现Runnable接口",
                "C.实现Thread接口",
                "D.以上都不正确"
            ],
            "answer": [
                "A.继承Thread类",
                "B.实现Runnable接口"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "Math.round(11.5) 等于多少 (). Math.round(-11.5) 等于多少 (  ).",
            "tags": [],
            "options": [
                "A.11 ,-11",
                "B.11 ,-12",
                "C.12 ,-11",
                "D.12 ,-12"
            ],
            "answer": [
                "C.12 ,-11"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "使用mvc模式设计的web应用程序具有以下优点,除了？",
            "tags": [],
            "options": [
                "A.可维护行强",
                "B.可扩展性强",
                "C.代码重复少",
                "D.大大减少代码量"
            ],
            "answer": [
                "D.大大减少代码量"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "java中下面哪些是Object类的方法（）",
            "tags": [],
            "options": [
                "A.notify()",
                "B.notifyAll()",
                "C.sleep",
                "D.wait()"
            ],
            "answer": [
                "A.notify()",
                "B.notifyAll()",
                "D.wait()"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "下面有关forward和redirect的描述，正确的是？",
            "tags": [],
            "options": [
                "A.forward是服务器将控制权转交给另外一个内部服务器对象，由新的对象来全权负责响应用户的请求",
                "B.执行forward时，浏览器不知道服务器发送的内容是从何处来，浏览器地址栏中还是原来的地址",
                "C.执行redirect时，服务器端告诉浏览器重新去请求地址",
                "D.forward是内部重定向，redirect是外部重定向",
                "E.redirect默认将产生301 Permanently moved的HTTP响应"
            ],
            "answer": [
                "B.执行forward时，浏览器不知道服务器发送的内容是从何处来，浏览器地址栏中还是原来的地址",
                "C.执行redirect时，服务器端告诉浏览器重新去请求地址",
                "D.forward是内部重定向，redirect是外部重定向"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "下面关于Spring的说法中错误的是（）",
            "tags": [],
            "options": [
                "A.Spring是一系列轻量级Java EE框架的集合",
                "B.Spring中包含一个“依赖注入”模式的实现",
                "C.使用Spring可以实现声明式事务",
                "D.Spring提供了AOP方式的日志系统"
            ],
            "answer": [
                "D.Spring提供了AOP方式的日志系统"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "下面关于依赖注入(DI)的说法不正确的是()",
            "tags": [],
            "options": [
                "A.依赖注入的主要目的是解耦合",
                "B.常见的依赖注入方式有Setter和构造方法",
                "C.只有通过Spring才能实现依赖注入(DI)"
            ],
            "answer": [
                "A.依赖注入的主要目的是解耦合"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "下面哪一项不属于优化Hibernate所鼓励的？",
            "tags": [],
            "options": [
                "A.使用单向一对多关联，不使用双向一对多",
                "B.不用一对一，用多对一取代",
                "C.配置对象缓存，不使用集合缓存",
                "D.继承类使用显式多态"
            ],
            "answer": [
                "A.使用单向一对多关联，不使用双向一对多"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "下面有关JAVA异常类的描述，说法错误的是？",
            "tags": [],
            "options": [
                "A.异常的继承结构：基类为Throwable，Error和Exception继承Throwable，RuntimeException和IOException等继承Exception",
                "B.非RuntimeException一般是外部错误(非Error)，其必须被 try{}catch语句块所捕获",
                "C.Error类体系描述了Java运行系统中的内部错误以及资源耗尽的情形，Error不需要捕捉",
                "D.RuntimeException体系包括错误的类型转换、数组越界访问和试图访问空指针等等，必须被 try{}catch语句块所捕获"
            ],
            "answer": [
                "D.RuntimeException体系包括错误的类型转换、数组越界访问和试图访问空指针等等，必须被 try{}catch语句块所捕获"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "关于AWT和Swing说法正确的是？",
            "tags": [],
            "options": [
                "A.Swing是AWT的子类",
                "B.AWT在不同操作系统中显示相同的风格",
                "C.AWT不支持事件类型，Swing支持事件模型",
                "D.Swing在不同的操作系统中显示相同的风格"
            ],
            "answer": [
                "D.Swing在不同的操作系统中显示相同的风格"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "关于JSP生命周期的叙述，下列哪些为真?",
            "tags": [],
            "options": [
                "A.JSP会先解释成Servlet源文件，然后编译成Servlet类文件",
                "B.每当用户端运行JSP时，jsp init()方法都会运行一次",
                "C.每当用户端运行JSP时，jsp service()方法都会运行一次",
                "D.每当用户端运行JSP时，jsp destroy()方法都会运行一次"
            ],
            "answer": [
                "A.JSP会先解释成Servlet源文件，然后编译成Servlet类文件",
                "C.每当用户端运行JSP时，jsp service()方法都会运行一次"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "类声明中，声明抽象类的关键字是 ( )",
            "tags": [],
            "options": [
                "A.public",
                "B.abstract",
                "C.final",
                "D.class"
            ],
            "answer": [
                "B.abstract"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "下列有关JAVA异常处理的叙述中正确的是（）",
            "tags": [],
            "options": [
                "A.finally是为确保一段代码不管发生什么“异常”都被执行的一段代码",
                "B.throws是用来声明一个成员方法可能抛出的各种异常情况",
                "C.final用于可以声明属性和方法，分别表示属性的不可变及方法的不可继承",
                "D.throw是用来明确地抛出一个异常情况"
            ],
            "answer": [
                "A.finally是为确保一段代码不管发生什么“异常”都被执行的一段代码",
                "B.throws是用来声明一个成员方法可能抛出的各种异常情况",
                "D.throw是用来明确地抛出一个异常情况"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "下面哪些类可以被继承？ Java.lang.Thread、java.lang.Number、java.lang.Double、java.lang.Math、 java.lang.ClassLoader",
            "tags": [],
            "options": [
                "A.Thread",
                "B.Number",
                "C.Double",
                "D.Math",
                "E.ClassLoader"
            ],
            "answer": [
                "A.Thread",
                "B.Number",
                "E.ClassLoader"
            ]
        },
        {
            "type": "multiple-choice",
            "question": "关于 Java 线程，下面说法错误的是（）。",
            "tags": [],
            "options": [
                "A.创建线程的方法有两种：实现Runnable接口和继承Thread类",
                "B.java利用线程使整个系统成为异步",
                "C.新线程一旦被创建，它将自动开始运行"
            ],
            "answer": [
                "C.新线程一旦被创建，它将自动开始运行"
            ]
        }
    ],
    "title": "Java基础四",
    "author": "张飞",
    "email": "zhangfei@haomo-studio.com",
    "version": "v1.0.0",
    "tags": [
        "java"
    ]
}