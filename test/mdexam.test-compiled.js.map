{"version":3,"sources":["mdexam.test.js"],"names":[],"mappings":"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","file":"mdexam.test-compiled.js","sourcesContent":["/**\n * Created by haomo on 17/2/11.\n */\n\"use strict\";\nconst fs = require('fs');\nconst path = require('path');\nconst mdexam = require('../lib/mdexam');\n\nlet md = mdexam();\n\ntest('测试将选择题转换成JSON', () => {\n  var mdq = \"\\\n## [选择题] 题目内容\\\n\\n\\\n#### [标签]\\\n  * 标签1\\\n  * 标签2\\\n\\n\\\n#### [选项] \\\n  * 选项1\\\n  * 选项2\\\n  * 选项3\\\n\\n\\\n#### [答案]\\\n  * 选项1\\\n  * 选项2\";\n\n  var qj = md.convertMdQ2J(mdq);\n  // console.log(qj);\n\n  expect(qj.type).toBe('multiple-choice');\n  expect(qj.question).toBe('题目内容');\n  expect(qj.tags.indexOf('标签1')).toBeGreaterThanOrEqual(0);\n  expect(qj.tags.indexOf('标签2')).toBeGreaterThanOrEqual(0);\n\n  expect(qj.options.indexOf('选项1')).toBeGreaterThanOrEqual(0);\n  expect(qj.options.indexOf('选项2')).toBeGreaterThanOrEqual(0);\n  expect(qj.options.indexOf('选项3')).toBeGreaterThanOrEqual(0);\n\n  expect(qj.answers.indexOf('选项1')).toBeGreaterThanOrEqual(0);\n  expect(qj.answers.indexOf('选项2')).toBeGreaterThanOrEqual(0);\n});\n\ntest('测试将填空题转换成JSON', () => {\n  var mdq = \"## [填空题] 题目内容\\n\\\n#### [标签]\\n\\\n  * 标签11\\n\\\n  * 标签12\\n\\\n\\n\\\n#### [答案]\\n\\\n* 正确答案或者用户的回答\\n\\\n\\\n#### [验证]\\n\\\n  * [answer-regex] /\\\\*\\\\s\\\\[answer-regex\\\\]\\\\s{0,}(\\\\S+)/g\";\n\n  var qj = md.convertFillIn2J(mdq);\n\n  expect(qj.type).toBe(\"fill-in\");\n  expect(qj.question).toBe('题目内容');\n  expect(qj.answer).toBe('正确答案或者用户的回答');\n  expect(qj.tags.indexOf('标签11')).toBeGreaterThanOrEqual(0);\n  expect(qj.tags.indexOf('标签12')).toBeGreaterThanOrEqual(0);\n\n  expect(qj.checker.length).toBe(1);\n  expect(qj.checker[0]['answer-regex']).toBe('/\\\\*\\\\s\\\\[answer-regex\\\\]\\\\s{0,}(\\\\S+)/g');\n});\n\ntest('测试将命令题转换成JSON', () => {\n  var mdq = \"## [命令题] 题目内容\\n\\\n#### [标签]\\n\\\n  * 标签11\\n\\\n  * 标签12\\n\\\n\\n\\\n#### [答案]\\n\\\n* 正确答案或者用户的回答\\n\\\n\\\n#### [验证]\\n\\\n  * [answer-regex] /\\\\*\\\\s\\\\[answer-regex\\\\]\\\\s{0,}(\\\\S+)/g\\n\\\n  * [output-regex] /\\\\*\\\\s\\\\[output-regex\\\\]\\\\s{0,}(\\\\S+)/g\";\n\n  var qj = md.convertCmd2J(mdq);\n\n  expect(qj.type).toBe(\"cmd-fill-in\");\n  expect(qj.question).toBe('题目内容');\n  expect(qj.answer).toBe('正确答案或者用户的回答');\n  expect(qj.tags.indexOf('标签11')).toBeGreaterThanOrEqual(0);\n  expect(qj.tags.indexOf('标签12')).toBeGreaterThanOrEqual(0);\n\n  expect(qj.checker.length).toBe(2);\n  expect(qj.checker[0]['answer-regex']).toBe('/\\\\*\\\\s\\\\[answer-regex\\\\]\\\\s{0,}(\\\\S+)/g');\n  expect(qj.checker[1]['output-regex']).toBe('/\\\\*\\\\s\\\\[output-regex\\\\]\\\\s{0,}(\\\\S+)/g');\n});\n\ntest('测试解析整个markdown文件', () => {\n  var markdown = fs.readFileSync(__dirname + '/exam.md', {flag: 'r+', encoding: 'utf8'});\n\n  var qj = md.m2j(markdown);\n  console.log(qj);\n\n  expect(qj.title).toBe('试题名称');\n  expect(qj.author).toBe('胡小根');\n  expect(qj.email).toBe('hxg@haomo-studio.com');\n  expect(qj.version).toBe('v1.0.0');\n  expect(qj.tags.indexOf('标签1')).toBeGreaterThanOrEqual(0);\n  expect(qj.tags.indexOf('标签2')).toBeGreaterThanOrEqual(0);\n  expect(qj.tags.indexOf('标签3')).toBeGreaterThanOrEqual(0);\n});"]}